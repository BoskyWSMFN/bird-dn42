table peering;
table kernelcopy;

protocol device {
	scan time 10;
}

# filter helpers
#################

function is_freifunk_dn42() {
        return (net ~ [
            10.0.0.0/8{12,32},
            172.22.0.0/15+,
            172.31.0.0/16,
	    10.100.0.0/14
            ]);
}

function is_default()  { return net ~ [0.0.0.0/0     ]; }
function is_freifunk() { return net ~ [10.0.0.0/8+   ]; }
function is_dn42()     { return net ~ [172.22.0.0/15+]; }
function is_chaosvpn() { return net ~ [172.31.0.0/16+]; }

# local configuration
######################

include "bird_local.conf";

# Kernel routing tables
########################

protocol kernel {
	scan time 20;
	device routes;
	import none;
	export filter {
		if is_dn42()     then { krt_prefsrc = OWNIP; accept ; }
		if is_freifunk() then { krt_prefsrc = OWNIP; accept ; }
		reject;
	};
};

protocol kernel {
	table kernelcopy;
	kernel table KERNEL_TABLE;
	scan time 20;
	device routes;
	import none;
	export filter {
		if is_default()  then accept;
		if is_dn42()     then { krt_prefsrc = OWNIP; accept ; }
		if is_freifunk() then { krt_prefsrc = OWNIP; accept ; }
		reject;
	};
}

# plumbing
###########

protocol pipe {
	peer table kernelcopy;
	import none;
	export all;
}

protocol pipe {
	peer table peering;
	import all;
	export where proto = "static_mesh";
}

# static routes
################

protocol static unreachable_default {
	route 0.0.0.0/0 reject;
}

# Mesh-internal BGP between all gateways
#########################################

template bgp bgp_ibgp {
	table peering;
	local as OWNAS;
	preference 0;
	direct;
	gateway direct;
	next hop self;
	import all;
	export where source = RTS_BGP;
}

include "bird_ibgp.conf";

# InterCity VPN peerings
#########################

template bgp bgp_icvpn {
	table peering;
	local as OWNAS;
	import where (is_freifunk() || is_dn42() || is_chaosvpn()) && !is_self_net();
	export all;
};

include "bird_icvpn.conf";
