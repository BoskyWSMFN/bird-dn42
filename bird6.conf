table peering;
table kernelcopy;

protocol device {
	scan time 10;
}

# filter helpers
#################

function is_default()  { return net ~ [::/0           ]; }
function is_global()   { return net ~ [2000::/3+      ]; }
function is_ula()      { return net ~ [fc00::/7{48,64}]; }
function is_freifunk() { return net ~ [2001:bf7::/32+ ]; }

# local configuration
######################

include "bird6_local.conf";

# Kernel routing tables
########################

protocol kernel {
	scan time 20;
	device routes;
	import none;
	export filter {
		if is_ula()      then { krt_prefsrc = ULA_IP;    accept; }
		if is_freifunk() then { krt_prefsrc = PUBLIC_IP; accept; }
		reject;
	};
}

protocol kernel {
	table kernelcopy;
	kernel table KERNEL_TABLE;
	scan time 20;
	device routes;
	import none;
	export all;
}

# plumbing
###########

protocol pipe {
	peer table kernelcopy;
	import none;
	export all;
}

protocol pipe {
	peer table peering;
	import all;
	export none;
}

# static routes
################

protocol static unreachable_default {
	preference 0;
	route ::/0 reject;
}

# Mesh-internal BGP between all gateways
#########################################

template bgp bgp_ibgp {
	table peering;
	local as OWNAS;
	direct;
	gateway direct;
	next hop self;
	import all;
	export filter { bgp_community.add((OWNAS, 1));
		        if source = RTS_BGP then accept;
		        reject;
	              };
}

include "bird6_ibgp.conf";

# InterCity VPN peerings
#########################

template bgp bgp_icvpn {
	table peering;
	local as OWNAS;
	import where (is_ula() || is_freifunk()) && !is_self_net();
	export where !is_default();
}

template bgp bgp_icvpn_public {
	table peering;
	local as OWNAS;
	import where !is_self_net();
	export where !is_default();
}

include "bird6_icvpn.conf";
