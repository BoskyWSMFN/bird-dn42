table peering;
table freifunk; # RIP, mesh, kernel
table internal; # used for table 42

include "bird6_local.conf";

protocol device {
	scan time 10;
}

# filter helpers
#################

function is_default() {
	return net ~ [ ::0/0 ];
}

function is_ula() {
	return (net ~ [fc00::/7{48,64}]);
}

function is_global() {
	return (net ~ [2000::/3+]);
}

function is_freifunk() {
	return (net ~ [2001:bf7::/32+]);
}

function is_self() {
	return (proto = "static_mesh");
}

filter kernel_export_filter {
	if ! (is_ula() || is_freifunk()) then reject;
	if is_ula() then krt_prefsrc = ULA_IP;
	if is_freifunk() then krt_prefsrc = PUBLIC_IP;
	accept;
}

# Kernel routing tables
########################

# Export ULA routes from table freifunk to the kernel's master table.

protocol kernel kernel_master {
	table freifunk;
	scan time 20;
	import none;
	export filter kernel_export_filter;
}

# Export all routes from table freifunk to the kernel's freifunk table.

protocol kernel kernel_mesh {
	table internal;
	scan time 20;
	import none;
	export all;
	device routes;
	kernel table KERNEL_TABLE;
}

# plumbing
###########

protocol pipe pipe_freifunk {
	peer table freifunk;
	import where is_ula() || is_freifunk();
	export none;
}

protocol pipe pipe_freifunk_mesh {
	table freifunk;
	peer table internal;
	import none;
	export all;
}

protocol pipe pipe_bgp_freifunk {
	table peering;
	peer table freifunk;
	export all;
	import where is_self_net();
}

# Mesh-internal BGP between all gateways
#########################################

template bgp bgp_ibgp {
	table peering;
	local as OWNAS;
	import all;
	preference 0;
	export where source = RTS_BGP;
	direct;
	gateway direct;
	next hop self;
}

include "bird6_ibgp.conf";

# InterCity VPN peerings
#########################

template bgp bgp_icvpn {
	table peering;
        local as OWNAS;
        import where (is_ula() || is_freifunk());
        export where (is_self()) || (source = RTS_BGP);
}

template bgp bgp_icvpn_public {
	table peering;
        local as OWNAS;
        import where (is_ula() || is_global() || is_default());
        export where (is_self()) || (source = RTS_BGP);
}


include "bird6_icvpn.conf";

# DN42 peerings
################

template bgp bgp_dn42 {
	table peering;
	local as OWNAS;
	import where is_ula();
	export where (is_self() || source = RTS_BGP);
}

include "bird6_dn42.conf";

# Mesh-internal routing
########################

protocol rip rip_mesh {
	table freifunk;
	preference 10;
	export all;
	import where is_ula() || is_self_net();
	interface "freifunk";
}
