protocol device {
  scan time 10;
}

# filter helpers
#################

# Freifunk (Foerderverein Freie Netzwerke) IPv6 Range
function is_freifunk() { return net ~ [ 2001:bf7::/32+ ]; }

function is_dn42() {
  return net ~ [
    fd00::/8{48,64},             # official ULA-Network for dn42
    2001:470:1f0b:592::/64,      # welterde
    2001:470:9f43::/48{48,64},   # nihilus
    2001:470:1f0b:977::/64,      # hetzner v6 peering project
    2001:470:9ffb::/48{48,64},   # hetzner v6 peering project
    2001:6f8:109d::/48{48,64},   # hetzner v6 peering project
    2001:6f8:1242::/48{48,64},   # hetzner v6 peering project
    2001:6f8:128b::/48{48,64},   # hetzner v6 peering project
    2001:6f8:13b1::/48{48,64},   # hetzner v6 peering project
    2a01:4f8:100:2284::/64,      # planet cyborg
    2a01:4f8:100:2ffe::/64,      # planet cyborg
    2a02:2918:1002::/48{48,64},  # planet cyborg
    2001:6f8:13db::/48{48,64},   # toidinamai
    2001:8d8:81:5c0::/60{60,64}, # spaceboyz.net
    2001:8d8:81:a00::/60{60,64}, # perrin
    2001:16b0:1007::/48{48,64},  # drixter
    2001:6f8:93c::/48{48,64},    # drixter
    2001:67c:21ec::/48{48,64},   # E-UTP
    2001:6f8:121a::/48{48,64},   # macias
    2001:470:1f0a:c8f::/64,      # macias
    2001:470:1f0a:c98::/64,      # macias
    2001:6f8:900:38f::/64,       # macias
    2001:470:9949::/48{48,64},   # amadeus
    2001:41d0:1:cd42::/64,       # amadeus
    2a01:4f8:100:9082::/64,      # otih
    2001:470:9f58::/48{48,64},   # otih
    2001:470:1f0b:5f2::/64,      # otih
    2001:470:1f0a:46e::/64,      # mittagessen
    2a01:4f8:120:4081:d42::/76,  # docsteel
    2001:470:1f0b:f2e::/64,      # script
    2001:470:9c97::/48,          # script
    2001:15c0:1000:100::/64,     # Jan Prunk
    2001:6f8:1019::/64,          # soma
    2a01:198:22c::/48{48,64},    # soma
    2001:470:9ce6::/55{48,64},   # crest
    2001:470:d4df::/48{48,64},   # tim
    2001:470:1f0b:1af5::/64,     # NeoRaider
    2001:6f8:1d14::/48{48,64},   # NeoRaider
    2001:6f8:1d26::/48{48,64},   # NeoRaider
    2001:470:9ff8::/48{48,64},   # jomat
    2001:470:1f09:585::/64,      # thejetset
    2001:470:5084::/48{48,64},   # Martin89
    2001:470:caab::/48{48,64},   # Martin89
    2001:41d0:1:b6bb::/64,       # Martin89
    2001:770:146:666::/64,       # Schrodinger
    2001:41d0:1:c700::/56,       # Schrodinger
    2001:770:146:2::/64,         # Schrodinger
    2001:470:b9c8::/48{48,64}    # Olipro
    2001:470:9738::/48{48,64}    # Olipro
    2001:470:c599::/48{48,64}    # Olipro
    2a00:1828:2000:276::/64      # blotter
    2001:6f8:1194::/48{48,64}    # c3d2 hq
    2a01:198:485::/48{48,64}     # merlin
    2001:7F0:3003::/48{48,64}    # CCC Munich
  ];
}

function is_cjdns() { return net ~ [fc00::/8{48,64}]; }

# local configuration
######################

include "bird/local6.conf";

# Kernel routing tables
########################

protocol kernel {
  scan time 20;
  device routes;
  import none;
  export filter {
    krt_prefsrc = OWNIP;
    accept;
  };
};

# static routes
################

protocol static {
  route fdc0:4992:6a6d::/48 reject;
}

template bgp dnpeers {
  table peering;
  local as OWNAS;
  path metric 1;
  import keep filtered;
  import filter {
    if (is_dn42() || is_freifunk() || is_cjdns()) && !is_self_net() then {
      accept;
    }
    reject;
  };
  export filter {
    if is_dn42() || is_freifunk() || is_cjdns() then {
      accept;
    }
    reject;
  };
  route limit 10000;
}

include "bird/peers6/*";

# OSPF
# #########

protocol ospf {
  import all;
  export all;

  area 0 {
    interface "evenetbridge" {
      authentication cryptographic;
      include "bird/ospf-password.conf";
    };
  };
}
